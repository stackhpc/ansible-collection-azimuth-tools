#####
## Template used to generate Nginx config with gomplate
#####

load_module  modules/ngx_http_js_module.so;

# Run Nginx in the foreground
daemon  off;
# Run worker processes as the nginx user
user  nginx;

worker_processes  auto;

error_log  /var/log/nginx/error.log  {{ getenv "GUACAMOLE_MITM_LOG_LEVEL" "notice" }};
pid  /var/run/nginx/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include  /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile  on;
    keepalive_timeout  65;

    # Decide the value of the connection header
    # This is required to support proxying websockets
	map  $http_upgrade  $connection_upgrade {
        default  upgrade;
        ''  close;
    }

    # Get the authenticated user and groups from the certificate that was validated downstream
    js_import  /etc/nginx/js/guacamole_auth.js;

    server {
        listen  {{ getenv "GUACAMOLE_MITM_LISTEN_ADDRESS" "127.0.0.1" }}:{{ getenv "GUACAMOLE_MITM_LISTEN_PORT" "8081" }};
        server_name   _;

		proxy_http_version  1.1;
        # Don't impose a maximum size on the client body
        client_max_body_size  0;
		client_body_buffer_size  128k;
        # Turn off buffering - just send data directly back to the client
        proxy_buffering  off;

        # Set headers for the proxy request
        proxy_set_header  Host  $host;
		proxy_set_header  X-Real-IP  $remote_addr;
		proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;
        # Enable the proxying of websocket connections
        proxy_set_header  Upgrade  $http_upgrade;
        proxy_set_header  Connection  $connection_upgrade;

        #Â Redirect the root path to guacamole
        location = / {
            return  301  $scheme://$host/guacamole/;
        }

        # Proxy most traffic directly to Guacamole
        location /guacamole {
            proxy_pass  http://{{ getenv "GUACAMOLE_MITM_UPSTREAM_ADDRESS" "127.0.0.1" }}:{{ getenv "GUACAMOLE_MITM_UPSTREAM_PORT" "8080" }};
        }

        # When an API token is rejected, call out to Javascript to inject known credentials
        location = /guacamole/api/tokens {
            js_content  guacamole_auth.getApiTokenResponse;
        }

        # Endpoint that can be used to test for readyness from the portal
        location = /_ready {
            add_header  Content-Type  text/plain;
            return  200  "ready";
        }
    }
}
